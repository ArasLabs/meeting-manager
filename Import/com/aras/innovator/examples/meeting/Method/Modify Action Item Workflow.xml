<AML>
 <Item type="Method" id="60ADC8C7B4E24F49B7A4AA26DA7691BE" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Modify Action Item Workflow
//
// Called OnAfterAdd & OnAfterUpdate for items with a relationship to Action Item.  Performs various 
//  housekeeping tasks related to the Action Item workflow

// Get the workflow
Innovator inn = this.getInnovator();
Item wfl = this.newItem("Workflow", "get");
wfl.setProperty("source_id", this.getID());

Item wflProc = wfl.createRelatedItem("Workflow Process", "get");
wflProc.setProperty("description", "Action Item");
wfl = wfl.apply();
if (wfl.getItemCount() < 0) return inn.newError("Error retrieving workflow: " + wfl.getErrorDetail());
if (wfl.getItemCount() == 0) return this;
wflProc = wfl.getRelatedItem();
string wflProcId = wflProc.getID();

// Start the workflow (doesn't hurt anything if it's already running)
if (wflProc.getProperty("state", "") != "Active")
{
    wflProc.apply("startWorkflow");
}

// Get the Worklow Process after it's been started
wflProc = this.newItem("Workflow Process", "get");
wflProc.setAttribute("select", "id");
wflProc.setID(wflProcId);

Item actRel = wflProc.createRelationship("Workflow Process Activity", "get");
actRel.setAttribute("select", "id,related_id(name,state,is_start,priority)");
actRel.setAttribute("orderBy", "created_on");
wflProc = wflProc.apply();
if (wflProc.getItemCount() != 1) return inn.newError("Error retrieving workflow process: " + wflProc.getErrorDetail());



// Edit the Workflow Process to set its name and some Activity properties
wflProc.setAction("edit");
wflProc.setProperty("name", this.getProperty("keyed_name"));
Item acts = wflProc.getItemsByXPath("Relationships/Item[@type='Workflow Process Activity'][related_id/Item[priority='2']]");
for (int i = 0; i < acts.getItemCount(); i++)
{
    acts.getItemByIndex(i).setAction("edit");
    acts.getItemByIndex(i).getRelatedItem().setAction("edit");
    acts.getItemByIndex(i).getRelatedItem().setProperty("y", Convert.ToString((i + 1) * 50));
    acts.getItemByIndex(i).getRelatedItem().setProperty("managed_by_id", this.getProperty("owned_by_id", ""));
}
wfl = wflProc.apply();
if (wfl.isError()) return inn.newError("Error editing workflow process: " + wfl.getErrorDetail());

// Go through the Activities to activate the new ones and cancel the deleted ones 
acts = wflProc.getItemsByXPath("Relationships/Item[@type='Workflow Process Activity']/related_id/Item[priority='2']");
for (int i = 0; i < acts.getItemCount(); i++)
{
    Item thisAct = this.newItem();
    thisAct.loadAML(acts.getItemByIndex(i).node.OuterXml);
    if (thisAct.getProperty("state") == "Pending")
    {
        thisAct = thisAct.apply("ActivateActivity");
        if (thisAct.isError()) return inn.newError("Error activating activity : " + thisAct.getErrorDetail());
    }
    else if (thisAct.getProperty("state") == "Cancelled")
    {
    	
    }
    else    
    {       
        Item tempItem = this.newItem("Action Item", "get");
        tempItem.setProperty("activity", thisAct.getID());
        tempItem = tempItem.apply();
        if (tempItem.getItemCount() == 0) thisAct = thisAct.promote("Cancelled", "");
    }
}
//Activate hold activity condition
int iTotalItems = acts.getItemCount();
int iCounter = 0;
for (int i = 0; i <iTotalItems; i++)
{
    Item thisAct = this.newItem();
    thisAct.loadAML(acts.getItemByIndex(i).node.OuterXml);
    if (thisAct.getProperty("state") == "Closed" || thisAct.getProperty("state") == "Cancelled")
    {
        iCounter = iCounter + 1;
    }
}
//Set hold to active hold activity if all action items are closed or cancelled
if (iCounter == (iTotalItems - 1))
{ 
	Item actHolds = wflProc.getItemsByXPath("Relationships/Item[@type='Workflow Process Activity']/related_id/Item[priority='3']");
    Item thisAct = this.newItem();
    thisAct.loadAML(actHolds.getItemByIndex(0).node.OuterXml);    
		    
	//turn wait for all input off
	Item eItm = inn.newItem("Activity", "edit");
	eItm.setProperty("wait_for_all_inputs", "0");
	eItm.setID(thisAct.getID());
	eItm = eItm.apply();

	thisAct.setAction("edit");
	thisAct.setProperty("managed_by_id", this.getProperty("owned_by_id", ""));
    thisAct = thisAct.apply("ActivateActivity");
    if (thisAct.isError()) return inn.newError("Error activating activity : " + thisAct.getErrorDetail());
}


return this;]]></method_code>
  <method_type>C#</method_type>
  <name>Modify Action Item Workflow</name>
 </Item>
</AML>